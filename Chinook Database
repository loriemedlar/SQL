--1. Show Customers (their full names, customer ID, and country) who are not in the US
SELECT FirstName, LastName, CustomerId, Country
FROM chinook.customers
WHERE Country <> 'USA';

--2. Show only the records for Customers from Brazil
SELECT *
FROM chinook.customers
WHERE Country = 'Brazil';

--3. Find the Invoices of customers who are from Brazil and show the customer's full name, Invoice ID, Date of the invoice, and billing country.
SELECT cust.FirstName, cust.LastName, inv.InvoiceId, inv.InvoiceDate, inv.BillingCountry
FROM chinook.invoices inv
LEFT JOIN chinook.customers cust
ON inv.CustomerId = cust.CustomerId
WHERE inv.BillingCountry = 'Brazil';

--4. Show the Employees who are Sales Agents
SELECT EmployeeId, FirstName, LastName, Title
FROM chinook.employees
WHERE Title LIKE 'Sales%Agent';

--5. Find a unique/distinct list of billing countries from the Invoice table.
SELECT DISTINCT BillingCountry
FROM chinook.invoices;

--6. Provide a query that shows the invoices associated with each sales agent. The resulting table should include the Sales Agent's full name.
SELECT emp.FirstName || ' ' || emp.LastName AS SalesAgentName, inv.InvoiceId, inv.InvoiceDate, inv.BillingCountry
FROM chinook.invoices inv
JOIN chinook.customers cust
ON inv.customerId = cust.CustomerId
JOIN chinook.employees emp
ON emp.EmployeeId = cust.SupportRepId;

--7. Show the Invoice Total, Customer name, Country, and Sales Agent name for all invoices and customers
SELECT inv.Total AS InvoiceTotal, cust.FirstName || ' ' || cust.LastName AS CustomerName, cust.Country, emp.FirstName || ' ' || emp.LastName AS SalesAgentName
FROM chinook.invoice_items invit
JOIN chinook.invoices inv ON invit.InvoiceId = inv.InvoiceId
JOIN chinook.customers cust
ON inv.customerId = cust.CustomerId
JOIN chinook.employees emp
ON emp.EmployeeId = cust.SupportRepId;

--8. How many Invoices were there in 2009?
SELECT COUNT(*)
FROM chinook.invoices
WHERE InvoiceDate BETWEEN '2009-01-01' AND '2009-12-31';

--9. What are the total sales for 2009?
SELECT SUM(Total)
FROM chinook.Invoices
WHERE InvoiceDate BETWEEN '2009-01-01' AND '2009-12-31';

--10. Write a query that includes the purchased track name with each invoice line ID.
SELECT tracks.name, invit.InvoiceLineId
FROM chinook.invoice_items invit
JOIN chinook.tracks 
ON invit.TrackId = tracks.TrackId;

--11. -Write a query that includes the purchased track name AND artist name with each invoice line ID.
SELECT art.Name AS ArtistName, tracks.name AS TrackName, invit.InvoiceLineId
FROM chinook.invoice_items invit
LEFT JOIN chinook.tracks 
ON invit.TrackId = tracks.TrackId
JOIN chinook.albums alb
ON alb.AlbumId = tracks.AlbumId
LEFT JOIN chinook.artists art
ON art.ArtistId = alb.ArtistId;

--12. Provide a query that shows all the Tracks, and include the Album name, Media type, and Genre.
SELECT t.name AS TrackName, al.Title AS AlbumName, mt.name AS MediaType, g.name AS Genre
FROM chinook.tracks t
JOIN chinook.albums al
ON t.AlbumId = al.AlbumId
JOIN chinook.media_types mt
ON t.MediaTypeId = mt.MediaTypeId
JOIN chinook.genres g
ON t.GenreId = g.GenreId;

--13. Show the total sales made by each sales agent.
SELECT emp.FirstName || ' ' || emp.LastName AS SalesAgentName, ROUND(SUM(inv.Total),2) AS TotalSales
FROM chinook.employees emp
JOIN chinook.Customers cust
    ON emp.EmployeeId = cust.SupportRepId
JOIN chinook.Invoices inv
    ON inv.customerID = cust.customerID
WHERE emp.Title = 'Sales Support Agent' 
GROUP BY emp.FirstName || ' ' || emp.LastName;

--14. Which sales agent made the most dollars in sales in 2009?
SELECT emp.FirstName || ' ' || emp.LastName AS SalesAgentName, ROUND(SUM(inv.Total),2) AS TotalSales
FROM chinook.employees emp
JOIN chinook.Customers cust
    ON emp.EmployeeId = cust.SupportRepId
JOIN chinook.Invoices inv
    ON inv.customerID = cust.customerID
WHERE emp.Title = 'Sales Support Agent' 
AND inv.InvoiceDate LIKE '2009%'
GROUP BY emp.FirstName || ' ' || emp.LastName
ORDER BY TotalSales DESC;

--15. List track names according to genre
SELECT t.name, g.name AS Genre
FROM chinook.tracks t
LEFT JOIN chinook.genres g
ON t.GenreId = g.GenreId
ORDER BY g.name;

--16. List all Alternative and/or punk tracks
SELECT t.name, g.name AS Genre
FROM chinook.tracks t
LEFT JOIN chinook.genres g
ON t.GenreId = g.GenreId
WHERE g.name LIKE 'Alternative%'
ORDER BY g.name;

--17. List the revenue brought in by each genre
SELECT g.name AS Genre, ROUND(SUM(invit.UnitPrice *invit. Quantity), 2) AS Revenue_By_Genre
FROM tracks t
LEFT JOIN invoice_items invit
ON t.TrackId = invit.TrackId
JOIN genres g
ON g.GenreId = t.GenreId
GROUP BY g.name
ORDER BY Revenue_By_Genre DESC;

--18. Which genre had no revenue reported?
SELECT g.name AS Genre, ROUND(SUM(invit.UnitPrice *invit. Quantity), 2) AS Revenue_By_Genre
FROM tracks t
LEFT JOIN invoice_items invit
ON t.TrackId = invit.TrackId
JOIN genres g
ON g.GenreId = t.GenreId
GROUP BY g.name
HAVING ROUND(SUM(invit.UnitPrice *invit. Quantity), 2) IS NULL;

--19. Which artist brought in the most revenue?
SELECT art.Name, ROUND(SUM(invit.UnitPrice * invit.Quantity),2) AS Revenue 
FROM chinook.invoice_items invit
JOIN chinook.tracks t
    ON invit.TrackId = t.TrackId
JOIN chinook. albums alb
    ON alb.AlbumId = t.AlbumId
JOIN artists art
    ON art.ArtistId = alb.ArtistId
GROUP BY art.Name
ORDER BY Revenue DESC
LIMIT 1;


